x = "Percent",
fill = "Answer") +
scale_y_continuous(labels = function(x) paste0(abs(x), "%")) +
coord_flip() +
theme(axis.title = element_blank(),
legend.position = "bottom")
p5
p5 +
scale_fill_presage(
palette = "diverging_blue_green")
p5 +
scale_fill_presage(
palette = "diverging_blue_orange",
.direction = -1)
p5 <- survey_data %>%
ggplot() +
geom_col(aes(x = group,
fill = answer,
y = percent),
width = 0.8) +
labs(title = "Let's find out!",
subtitle = "How much do they agree with the statement \"Donuts are delicious\"?",
caption = "Totally made up data!",
x = "Percent",
fill = "Answer") +
scale_y_continuous(labels = function(x) paste0(abs(x), "%")) +
coord_flip() +
theme(axis.title = element_blank())
p5 +
scale_fill_presage(
palette = "diverging_blue_orange",
.direction = -1)
library(monochromeR)
library(colorspace)
library(tidyverse)
library(colorblindr)
presage_colours <- list(
presage_blue         = "#0072bc",
presage_light_blue   = "#008fd5",
presage_blue_green   = "#00abc5",
light_blue           = "#cce2f1",
presage_turqoise     = "#00a99d",
presage_green_blue   = "#00a775",
presage_green        = "#00a651",
presage_light_green  = "#39b54a",
presage_lime_green   = "#8dc63f",
presage_yellow_green = "#d7df23",
presage_gray         = "#6d6e71",
dark_orange          = "#D55E00",
fsi_blue             = "#041c2c",
blood_red            = "#991f17",
light_red            = "#df8879",
okabeito_magenta     = "#cc79a7",
okabeito_magenta2    = "#e0aeca",
okabeito_mustard     = "#e69f00",
okabeito_mustard2    = "#f0c566",
okabeito_yellow      = "#f0e442"
)
## Purpose: Different colours for representing unordered categories
## This is the default, darker version. It is appropriate for points and lines
qualitative_palette <- c(
presage_colours$presage_blue,
presage_colours$presage_light_green,
presage_colours$okabeito_mustard,
presage_colours$presage_yellow_green,
presage_colours$fsi_blue,
presage_colours$blood_red,
presage_colours$okabeito_magenta
)
monochromeR::view_palette(qualitative_palette)
## Example:
### POINTS
ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour = factor(cyl)), size = 4) +
scale_color_manual(values = qualitative_palette) +
theme_minimal()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour = factor(carb)), size = 4) +
scale_color_manual(values = qualitative_palette) +
theme_minimal()
#### Check for colour-blind friendliness:
colorblindr::cvd_grid()
### LINES
ggplot(economics_long, aes(date, value01, colour = variable)) +
geom_line() +
scale_color_manual(values = qualitative_palette) +
theme_minimal()
colorblindr::cvd_grid()
generate_palette(colour = presage_colours$okabeito_magenta,
modification = "go_lighter", n = 3, view_palette = TRUE)
qualitative_palette_light <- c(
presage_colours$presage_blue_green,
presage_colours$presage_lime_green,
presage_colours$okabeito_mustard2,
presage_colours$okabeito_yellow,
presage_colours$light_blue,
presage_colours$light_red,
presage_colours$okabeito_magenta2
)
monochromeR::view_palette(qualitative_palette_light)
ggplot(mpg, aes(y = class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
theme(legend.position = "top") +
scale_fill_manual(values = qualitative_palette_light) +
theme_minimal()
colorblindr::cvd_grid()
ggplot(mpg, aes(y = class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
theme(legend.position = "top") +
scale_fill_manual(values = qualitative_palette) +
theme_minimal()
## single hue
blues_palette <- generate_palette(colour = presage_colours$presage_blue, n = 5, modification = "go_lighter")
view_palette(blues_palette)
greens_palette <- generate_palette(colour = presage_colours$presage_light_green, n = 5, modification = "go_lighter")
view_palette(greens_palette)
## multi-hue
sequential_multi_hue_palette <- generate_palette(colour = presage_colours$presage_blue_green,
blend_colour = presage_colours$presage_lime_green,
n = 5)
view_palette(sequential_multi_hue_palette)
hcl_palettes(type = "diverging", plot = TRUE, n = 6)
diverging_hcl(palette = "Blue-Red 2", n = 6)
diverging_blue_green <- c(blues_palette[c(1, 3, 5)], greens_palette[c(5, 3, 1)])
view_palette(diverging_blue_green)
oranges_palette <- generate_palette(colour = presage_colours$dark_orange,
modification = "go_lighter",
n = 5)
view_palette(oranges_palette)
diverging_blue_orange <- c(blues_palette[c(1, 3, 5)], oranges_palette[c(5, 3, 1)])
view_palette(diverging_blue_orange)
presage_palettes <- list(
default = qualitative_palette,
qualitative_palette = qualitative_palette,
qualitative_palette_light = qualitative_palette_light,
sequential_blue = blues_palette,
sequential_green = greens_palette,
sequential_orange = oranges_palette,
diverging_blue_green = diverging_blue_green,
diverging_blue_orange = diverging_blue_orange,
diverging_two = c(presage_colours$presage_blue, presage_colours$dark_orange)
)
scale_color_presage <- function(palette = "default",
continuous = FALSE,
.colours = presage_colours,
.palettes = presage_palettes,
.direction = 1,
...) {
palette_colours <- .palettes[[palette]]
if (.direction == -1){
palette_colours <- rev(palette_colours)
}
if(continuous == FALSE) {
ggplot2::scale_colour_manual(values = palette_colours,
na.value = .colours$presage_gray,
...)
} else {
ggplot2::scale_colour_gradientn(colours = palette_colours,
na.value = .colours$presage_gray,
...)
}
}
scale_colour_presage <- scale_color_presage
scale_fill_presage <- function(palette = "qualitative_palette_light",
continuous = FALSE,
.colours = presage_colours,
.palettes = presage_palettes,
.direction = 1,
...) {
palette_colours <- .palettes[[palette]]
if (.direction == -1){
palette_colours <- rev(palette_colours)
}
if(continuous == FALSE) {
ggplot2::scale_fill_manual(values = palette_colours,
na.value = .colours$presage_gray,
...)
} else {
ggplot2::scale_fill_gradientn(colours = palette_colours,
na.value = .colours$presage_gray,
...)
}
}
p <- palmerpenguins::penguins %>%
ggplot() +
geom_point(aes(x = bill_length_mm,
y = flipper_length_mm,
fill = species,
size = body_mass_g),
shape = 21) +
labs(x = "Bill length (mm)",
y = "Flipper length (mm)",
title = "Let's try some *italics* in the title",
subtitle = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
caption = "Data from {palmerpenguins}") +
guides(size = "none")
p
p + scale_fill_presage()
p + scale_fill_presage(palette = "qualitative_palette")
p2 <- palmerpenguins::penguins %>%
ggplot() +
geom_point(aes(x = bill_length_mm,
y = flipper_length_mm,
color = species,
size = body_mass_g),
alpha = 0.5) +
labs(x = "Bill length (mm)",
y = "Flipper length (mm)",
title = "Let's try some *italics* in the title",
subtitle = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
caption = "Data from {palmerpenguins}") +
guides(size = "none")
p2
p2 + scale_color_presage()
p3 <- palmerpenguins::penguins %>%
ggplot() +
geom_point(aes(x = bill_length_mm,
y = flipper_length_mm,
fill = body_mass_g,
size = body_mass_g),
shape = 21,
colour = "white",
alpha = 0.8) +
labs(x = "Bill length (mm)",
y = "Flipper length (mm)",
title = "Let's try some *italics* in the title",
subtitle = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
caption = "Data from {palmerpenguins}") +
guides(size = "none")
p3
p3 + scale_fill_presage(continuous = TRUE)
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_blue",
.direction = -1)
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_green",
.direction = -1)
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_orange",
.direction = -1)
p4 <- palmerpenguins::penguins %>%
filter(!is.na(sex)) %>%
ggplot(aes(x = species,
fill = island),
stat = "count") +
geom_bar() +
labs(title = "Perfectly proportional penguins",
subtitle = "Where do they all live?",
caption = "Data from {palmerpenguins}") +
facet_grid(. ~ sex)
p4
p4 + scale_fill_presage()
p4 + scale_fill_presage(palette = "qualitative_palette")
p4 + scale_fill_presage()
survey_data <- tibble(answer = factor(rep(c("Strongly Disagree", "Moderately Disagree",
"Slightly Disagree", "Slightly Agree",
"Moderately Agree", "Strongly Agree"), 2),
levels = c("Strongly Disagree", "Moderately Disagree",
"Slightly Disagree", "Slightly Agree",
"Moderately Agree", "Strongly Agree")),
percent = c(5, 10, 10, 10, 20, 45,
45, 20, 10, 10, 10, 5),
group = sort(rep(c("Male", "Female"), 6))) %>%
mutate(display_percent = case_when(grepl("Dis|Neutral", answer) ~ -percent,
TRUE ~ percent))
p5 <- survey_data %>%
ggplot() +
geom_col(aes(x = group,
fill = answer,
y = percent),
width = 0.8) +
labs(title = "Let's find out!",
subtitle = "How much do they agree with the statement \"Donuts are delicious\"?",
caption = "Totally made up data!",
x = "Percent",
fill = "Answer") +
scale_y_continuous(labels = function(x) paste0(abs(x), "%")) +
coord_flip() +
theme(axis.title = element_blank())
p5
p5 +
scale_fill_presage(
palette = "diverging_blue_green")
p5 +
scale_fill_presage(
palette = "diverging_blue_orange",
.direction = -1)
p5 <- survey_data %>%
ggplot() +
geom_col(aes(x = group,
fill = answer,
y = percent),
width = 0.8) +
labs(title = "How much do they agree with the statement \"Donuts are delicious\"?",
caption = "Totally made up data!",
x = "Percent",
fill = "Answer") +
scale_y_continuous(labels = function(x) paste0(abs(x), "%")) +
coord_flip() +
theme(axis.title = element_blank())
p5
p5 +
scale_fill_presage(
palette = "diverging_blue_green")
p5 +
scale_fill_presage(
palette = "diverging_blue_orange",
.direction = -1)
library(ggplot2)
library(showtext)
library(cwi)
theme_presage <- function(base_theme = "minimal",
base_size = 20,
base_font = "",
title_size = 22,
title_font = "presage",
title_face = "plain",
show_grid = TRUE,
...) {
showtext::showtext_auto()
# Specify base font
if (base_font != "") {
if (base_font == "presage") {
sysfonts::font_add_google(name = "Libre Franklin", cache =TRUE)
base_font <- "Libre Franklin"
title_font <- "Libre Franklin"
} else if (base_font == "fsi") {
sysfonts::font_add_google(name = "Orbitron", cache =TRUE)
base_font <- "Orbitron"
title_font <- "Orbitron"
} else {
sysfonts::font_add_google(name = base_font, cache =TRUE)
}
}
# Specify title font
if (!title_font %in% c("presage", "fsi")) {
sysfonts::font_add_google(name = title_font, cache =TRUE)
} else if (title_font %in% c("Libre Franklin", "presage")) {
sysfonts::font_add_google(name = "Libre Franklin", cache =TRUE)
title_font <- "Libre Franklin"
} else if (title_font %in% c("Orbitron", "fsi")) {
sysfonts::font_add_google(name = "Orbitron", cache =TRUE)
title_font <- "Orbitron"
}
# CUSTOM THEME:
if (base_theme == "minimal") {
basic_theme <- ggplot2::theme_minimal(base_size = base_size, base_family = base_font)
} else if (base_theme %in% c("grey", "gray")) {
basic_theme <- ggplot2::theme_grey(base_size = base_size, base_family = base_font)
} else if (base_theme == "bw") {
basic_theme <- ggplot2::theme_bw(base_size = base_size, base_family = base_font)
} else if (base_theme == "linedraw") {
basic_theme <- ggplot2::theme_linedraw(base_size = base_size, base_family = base_font)
} else if (base_theme == "light") {
basic_theme <- ggplot2::theme_light(base_size = base_size, base_family = base_font)
} else if (base_theme == "dark") {
basic_theme <- ggplot2::theme_dark(base_size = base_size, base_family = base_font)
} else if (base_theme == "classic") {
basic_theme <- ggplot2::theme_classic(base_size = base_size, base_family = base_font)
} else if (base_theme == "void") {
basic_theme <- ggplot2::theme_void(base_size = base_size, base_family = base_font)
} else if (base_theme == "test") {
basic_theme <- ggplot2::theme_test(base_size = base_size, base_family = base_font)
}
basic_theme +
ggplot2::theme(
# title
plot.title = element_text(face = title_face, size = title_size, family = title_font),
plot.title.position = "plot",
# panel
panel.grid = element_line(color = ifelse(show_grid, "gray92", "transparent")),
# axis
# axis.line = element_line(color = ifelse(show_grid, "transparent", "black"), linewidth = 0.5, lineend = "round"),
# axis.ticks = element_line(color = ifelse(show_grid, "transparent", "grey20"), linewidth = 0.5, lineend = "round"),
...
)
}
presage_logo <- function(logo_name = "presage") {
if (logo_name == "presage") {
magick::image_read("C:\\Users\\presage\\Documents\\presagelogo.png")
} else if (logo_name == "pep") {
magick::image_read("C:\\Users\\presage\\Documents\\presagepeplogo.png")
} else {
magick::image_read("C:\\Users\\presage\\Documents\\presageplogo.png")
}
}
p <- ggplot(data = mpg) +
geom_point(aes(x = displ, y = cty)) +
labs(
title = "FlightSafety",
x = "Engine size", y = "City Mileage"
) +
theme_presage(
title_font = "fsi", base_size = 18, title_size = 22,
show_grid = TRUE, base_font = ""
)
?font_add_google
theme_presage <- function(base_theme = "minimal",
base_size = 20,
base_font = "",
title_size = 22,
title_font = "presage",
title_face = "plain",
show_grid = TRUE,
...) {
showtext::showtext_auto()
# Specify base font
if (base_font != "") {
if (base_font == "presage") {
sysfonts::font_add_google(name = "Libre Franklin")
base_font <- "Libre Franklin"
title_font <- "Libre Franklin"
} else if (base_font == "fsi") {
sysfonts::font_add_google(name = "Orbitron")
base_font <- "Orbitron"
title_font <- "Orbitron"
} else {
sysfonts::font_add_google(name = base_font)
}
}
# Specify title font
if (!title_font %in% c("presage", "fsi")) {
sysfonts::font_add_google(name = title_font)
} else if (title_font %in% c("Libre Franklin", "presage")) {
sysfonts::font_add_google(name = "Libre Franklin")
title_font <- "Libre Franklin"
} else if (title_font %in% c("Orbitron", "fsi")) {
sysfonts::font_add_google(name = "Orbitron")
title_font <- "Orbitron"
}
# CUSTOM THEME:
if (base_theme == "minimal") {
basic_theme <- ggplot2::theme_minimal(base_size = base_size, base_family = base_font)
} else if (base_theme %in% c("grey", "gray")) {
basic_theme <- ggplot2::theme_grey(base_size = base_size, base_family = base_font)
} else if (base_theme == "bw") {
basic_theme <- ggplot2::theme_bw(base_size = base_size, base_family = base_font)
} else if (base_theme == "linedraw") {
basic_theme <- ggplot2::theme_linedraw(base_size = base_size, base_family = base_font)
} else if (base_theme == "light") {
basic_theme <- ggplot2::theme_light(base_size = base_size, base_family = base_font)
} else if (base_theme == "dark") {
basic_theme <- ggplot2::theme_dark(base_size = base_size, base_family = base_font)
} else if (base_theme == "classic") {
basic_theme <- ggplot2::theme_classic(base_size = base_size, base_family = base_font)
} else if (base_theme == "void") {
basic_theme <- ggplot2::theme_void(base_size = base_size, base_family = base_font)
} else if (base_theme == "test") {
basic_theme <- ggplot2::theme_test(base_size = base_size, base_family = base_font)
}
basic_theme +
ggplot2::theme(
# title
plot.title = element_text(face = title_face, size = title_size, family = title_font),
plot.title.position = "plot",
# panel
panel.grid = element_line(color = ifelse(show_grid, "gray92", "transparent")),
# axis
# axis.line = element_line(color = ifelse(show_grid, "transparent", "black"), linewidth = 0.5, lineend = "round"),
# axis.ticks = element_line(color = ifelse(show_grid, "transparent", "grey20"), linewidth = 0.5, lineend = "round"),
...
)
}
presage_logo <- function(logo_name = "presage") {
if (logo_name == "presage") {
magick::image_read("C:\\Users\\presage\\Documents\\presagelogo.png")
} else if (logo_name == "pep") {
magick::image_read("C:\\Users\\presage\\Documents\\presagepeplogo.png")
} else {
magick::image_read("C:\\Users\\presage\\Documents\\presageplogo.png")
}
}
p <- ggplot(data = mpg) +
geom_point(aes(x = displ, y = cty)) +
labs(
title = "FlightSafety",
x = "Engine size", y = "City Mileage"
) +
theme_presage(
title_font = "fsi", base_size = 18, title_size = 22,
show_grid = TRUE, base_font = ""
)
p
p <- ggplot(data = mpg) +
geom_point(aes(x = displ, y = cty)) +
labs(
title = "Flight Safety",
x = "Engine size", y = "City Mileage"
) +
theme_presage(
title_font = "fsi", base_size = 18, title_size = 22,
show_grid = TRUE, base_font = ""
)
p
add_logo(p, presage_logo("presage"), height = 0.1, position = "right", place_inside = TRUE)
p + scale_fill_presage(palette = "qualitative_palette") +
theme_presage()
p2 + scale_color_presage() + theme_presage()
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_orange",
.direction = -1) +
theme_presage()
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_orange",
.direction = -1) +
theme_presage(
plot.title = ggtext::element_markdown()
)
p3 + scale_fill_presage(continuous = TRUE,
palette = "sequential_blue",
.direction = -1) +
theme_presage(title_font="fsi")
